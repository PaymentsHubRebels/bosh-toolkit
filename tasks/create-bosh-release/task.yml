---
platform: linux

image_resource:
  type: docker-image
  source:
    repository: paymentshubrebels/bosh-utils
    tag: 'latest'

params:
  release_name:
  final: false
  github_repository:

inputs:
- name: source-code
- name: blobs
- name: version
- name: bosh-toolkit

outputs:
- name: release

caches:
- path: .bosh

run:
  path: bash
  args:
  - -exc
  - |
    workdir=$(pwd)
    # For caching:
    export BOSH_CONFIG=${workdir}/.bosh

    function configure_local_blobstore {
      rm -rf .final_builds/
      echo '{}' > config/blobs.yml

      mkdir -p /tmp/blobs
      bosh int config/final.yml -o <(cat <<EOF
      - type: replace
        path: /blobstore/options
        value:
          blobstore_path: /tmp/blobs
      - type: replace
        path: /blobstore/provider
        value: local
    EOF) > final.yml
      mv final.yml config/
    }

    function add_blobs {
      local release_dir=$1
      pushd "$workdir/blobs"
        for blob in $(find * -type f); do
          bosh add-blob --dir="${release_dir}" "$blob" "$blob"
        done
      popd
    
    }

    function create_vendor_release {
        local package="$1"
        local config_file="$2"
        
        local git_url
        local package_name
        local ref
        local local_blobstore

        git_url=$(yq r "$config_file" -j | jq -r '.[] | select(.name== "'$package'").url')
        package_name=$(yq r "$config_file" -j | jq -r '.[] | select(.name== "'$package'").package')
        ref=$(yq r "$config_file" -j | jq -r '.[] | select(.name== "'$package'").ref')
        local_blobstore=$(yq r "$config_file" -j | jq -r '.[] | select(.name== "'$package'").local_blobstore')

        git clone "$git_url" "$package_name"

        pushd "$package_name"
          git checkout "$ref"
          if [[ "$local_blobstore" == "true" ]]; then
            configure_local_blobstore  
            add_blobs $(pwd)
          fi

          bosh create-release --force
        popd
    }

    function vendor_release {
      local package="$1"
      local config_file="$2"
      
      local package_name
      
      package_name=$(yq r "$config_file" -j | jq -r '.[] | select(.name== "'$package'").package')
      
      rm -rf "${workdir}/source-code/packages/${package_name}"
      bosh vendor-package --dir="${workdir}/source-code" "$package_name" "${workdir}/${package_name}"
    }

    bosh_options=(--force)

    if [[ "$final" == "true" ]]; then
      bosh_options=("${bosh_options[@]}" --final --version=$(cat version/version))
    fi

    pushd source-code
      configure_local_blobstore  
      add_blobs "$(pwd)"
    popd
    vendor_packages_config_file="${workdir}/bosh-toolkit/config/${release_name}/vendor_packages.yml"

    if [[ -f "$vendor_packages_config_file" ]]; then
      for package in $(yq r "$vendor_packages_config_file" '[*].name'); do
        create_vendor_release "$package" "$vendor_packages_config_file"
        vendor_release "$package" "$vendor_packages_config_file"
      done
    fi
    
    tar_name="${github_repository}-$(cat version/version)"
    pushd source-code
      bosh create-release "${bosh_options[@]}" --tarball=../release/${tar_name}.tgz
    popd