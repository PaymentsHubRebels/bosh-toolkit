resource_types:
- name: bosh-deployment
  type: docker-image
  source:
    repository: cloudfoundry/bosh-deployment-resource

resources:
- name: source-code
  type: git
  source:
    uri: ((bosh_release_url))
    branch: ((bosh_release_branch))

- name: bosh-toolkit
  type: git
  source:
    uri: https://github.com/((github_owner))/bosh-toolkit
    branch: master
    
- name: ubuntu-xenial
  type: bosh-io-stemcell
  source:
    name: bosh-warden-boshlite-ubuntu-xenial-go_agent
    version_family: ((stemcell_version_family))

- name: bosh-deployment
  type: bosh-deployment
  source:
    deployment: ((release_name))
    target: ((bosh_target))
    client: ((bosh_client))
    client_secret: ((bosh_client_secret))
    ca_cert: ((bosh_ca_cert))

- name: version
  type: semver
  source:
    driver: s3
    initial_version: 0.0.0
    bucket: bosh-releases-semver
    key: ((release_name))/version
    access_key_id: ((s3_access_key_id))
    secret_access_key: ((s3_secret_access_key))
    endpoint: ((s3_endpoint))
    disable_ssl: true

- name: binary-releases-repo
  type: s3
  source:
    bucket: binary-releases-repo
    regexp: ((release_name))/((release_name))-(.*)-*.tgz
    access_key_id: ((s3_access_key_id))
    secret_access_key: ((s3_secret_access_key))
    endpoint: ((s3_endpoint))


- name: cleanup-trigger
  type: semver
  source:
    driver: s3
    initial_version: 0.0.0
    bucket: triggers
    key: ((release_name))/trigger
    access_key_id: ((s3_access_key_id))
    secret_access_key: ((s3_secret_access_key))
    endpoint: ((s3_endpoint))
    disable_ssl: true

- name: github-release
  type: github-release
  source:
    owner: ((github_owner))
    repository: ((github_repository))
    access_token: ((github_token))

jobs:
- name: acceptance
  plan:
  - get: source-code
    trigger: true
  - get: bosh-toolkit
  - task: run-specs
    file: bosh-toolkit/tasks/run-specs/task.yml
  - get: version
    params: {bump: minor}
  - task: download-blobs
    file: bosh-toolkit/tasks/download-blobs/task.yml
    params:
      release_name: ((release_name))
  - task: create-release
    file: bosh-toolkit/tasks/create-bosh-release/task.yml
    params:
      release_name: ((release_name))
      final: true
      github_owner: ((github_owner))
      github_repository: ((github_repository))
  - get: ubuntu-xenial
  - put: bosh-deployment
    params:
      manifest: bosh-toolkit/manifests/((release_name)).yml
      stemcells:
      - ubuntu-xenial/*.tgz
      releases:
      - release/*.tgz
      vars: {}
    on_failure:
      put: cleanup-trigger
      params: {bump: minor}
    on_success:
      task: run-errands
      file: bosh-toolkit/tasks/run-errands/task.yml
      params:
        release_name: ((release_name))
        deployment: ((release_name))
        BOSH_ENVIRONMENT: ((bosh_target))
        BOSH_CA_CERT: ((bosh_ca_cert))
        BOSH_CLIENT: ((bosh_client))
        BOSH_CLIENT_SECRET: ((bosh_client_secret))

- name: publish
  plan:
  - get: source-code
    trigger: true
    passed: [acceptance]
  - get: bosh-toolkit
  - task: download-blobs
    file: bosh-toolkit/tasks/download-blobs/task.yml
    params:
      release_name: ((release_name))
    input_mapping:
      version: ((release_name))-version
  - get: version
    params: {bump: minor}
  - task: create-release
    file: bosh-toolkit/tasks/create-bosh-release/task.yml
    params:
      release_name: ((release_name))
      final: true
      github_repository: ((github_repository))
  - task: export-release
    file: bosh-toolkit/tasks/export-release/task.yml
    params:
      release_name: ((release_name))
      deployment: ((release_name))
      BOSH_ENVIRONMENT: ((bosh_target))
      BOSH_CA_CERT: ((bosh_ca_cert))
      BOSH_CLIENT: ((bosh_client))
      BOSH_CLIENT_SECRET: ((bosh_client_secret))
  - task: prepare-release-notes
    file: bosh-toolkit/tasks/create-release-notes/task.yml
    params:
      release_name: ((release_name))
      github_repository: ((github_repository))
  - put: github-release
    params:
      name: version/version
      tag: version/version
      body: release-notes/note.md
      globs:
        - release/*.tgz
  - put: binary-releases-repo
    params:
      file: binary-release/*.tgz    
  - put: cleanup-trigger
    params: {bump: minor}
  - put: version
    params: {bump: minor}

- name: cleanup-environment
  plan:
  - get: cleanup-trigger
    trigger: true
  - put: bosh-deployment
    params:
      delete:
        enabled: true
        force: true
  - get: bosh-toolkit
  - task: delete-releases
    file: bosh-toolkit/tasks/delete-releases/task.yml
    params:
      BOSH_ENVIRONMENT: ((bosh_target))
      BOSH_CA_CERT: ((bosh_ca_cert))
      BOSH_CLIENT: ((bosh_client))
      BOSH_CLIENT_SECRET: ((bosh_client_secret))

  - task: delete-stemcells
    file: bosh-toolkit/tasks/delete-stemcells/task.yml
    params:
      BOSH_ENVIRONMENT: ((bosh_target))
      BOSH_CA_CERT: ((bosh_ca_cert))
      BOSH_CLIENT: ((bosh_client))
      BOSH_CLIENT_SECRET: ((bosh_client_secret))